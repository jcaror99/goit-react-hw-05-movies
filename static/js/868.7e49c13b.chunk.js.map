{"version":3,"file":"static/js/868.7e49c13b.chunk.js","mappings":"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","sources":["services/getCast.js","components/Cast/Cast.jsx"],"sourcesContent":["import { instance } from './setting';\n\nconst getCast = async idMovie => {\n  try {\n    const response = await instance.get(\n      `movie/${idMovie}/credits?language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error('Error fetching cast:', error);\n    throw new Error('Failed to fetch cast');\n  }\n};\n\nexport { getCast };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from './../../services/getCast';\nimport { getImages } from 'services/getImages';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [imageMovies, setImageMovies] = useState({});\n\n  const fetchCast = async moviesId => {\n    try {\n      const response = await getCast(moviesId);\n      console.log(response);\n      setCast(response);\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      throw new Error('Failed to fetch movies');\n    }\n  };\n\n  const fetchImages = async () => {\n    try {\n      const response = await getImages();\n      console.log('images', response);\n      setImageMovies(response);\n    } catch (error) {\n      console.error('Error fetching Images movies:', error);\n      throw new Error('Failed to fetch Images movies');\n    }\n  };\n\n  useEffect(() => {\n    fetchCast(moviesId);\n    fetchImages();\n  }, [moviesId]);\n\n  return (\n    <div>\n      <ul>\n        {cast\n          .filter(\n            (castMember, index, self) =>\n              index === self.findIndex(c => c.id === castMember.id)\n          )\n          .map(castMember => (\n            <div key={castMember.id}>\n              <img\n                src={\n                  imageMovies.base_url &&\n                  imageMovies.profile_sizes &&\n                  castMember.profile_path\n                    ? `${imageMovies.base_url}${imageMovies.profile_sizes[0]}${castMember.profile_path}`\n                    : ''\n                }\n                alt={castMember.name}\n              />\n              <li>{castMember.name}</li>\n            </div>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["getCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","idMovie","response","_context","prev","next","instance","concat","sent","abrupt","data","cast","t0","console","error","Error","stop","_x","apply","arguments","moviesId","useParams","_useState","useState","_useState2","_slicedToArray","setCast","_useState3","_useState4","imageMovies","setImageMovies","fetchCast","log","fetchImages","_ref2","_callee2","_context2","getImages","useEffect","_jsx","children","filter","castMember","index","self","findIndex","c","id","map","_jsxs","src","base_url","profile_sizes","profile_path","alt","name"],"sourceRoot":""}